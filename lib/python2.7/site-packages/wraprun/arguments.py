from collections import OrderedDict

class Argument(object):
    def __init__(self, name, **kwargs):
        self.name = name
        self.flags = kwargs.pop('flags', None)
        self.split = kwargs.pop('split', False)
        self.parser = kwargs.pop('parser')
        self._translator = kwargs.pop('formatter', None)

        self.parser['dest'] = self.name

        assert isinstance(self.flags, (list, type(None)))

    def format(self, value):
        output = []
        if self.flags:
            output.append(self.flags[0])

        if self._translator is not None:
            output.append(self._translator(value))
        elif isinstance(value, list):
            for i in value:
                output.append(str(i))
        elif isinstance(value, bool):
            pass
        else:
            output.append(str(value))
        return output

    def add_to_parser(self, parser):
        if self.flags is not None:
            parser.add_argument(*self.flags, **self.parser)
        else:
            parser.add_argument(**self.parser)

    @property
    def default(self):
        return self.parser.get(
            'default',
            [None] if self.split else None)


class ArgumentList(object):
    def __init__(self, *args):
        self._args = OrderedDict()
        for arg in args:
            self._args[arg.name] = arg

    @property
    def names(self):
        return self._args.keys()

    @property
    def splits(self):
        return [k for k in self._args if self._args[k].split]

    def __iter__(self):
        for _, arg in self._args.iteritems():
            yield arg

    def __len__(self):
        return len(self._args)

    def __contains__(self, item):
        return item in self._args

    def __getitem__(self, name):
        return self._args[name]

    def get(self, name, default=None):
        return self._args.get(name, default)

