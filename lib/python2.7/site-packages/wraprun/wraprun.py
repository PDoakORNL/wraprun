#!/usr/bin/env python

from __future__ import print_function
import subprocess
import sys
import os
import tempfile

from . import GROUP_OPTIONS, GLOBAL_OPTIONS
from .parsers import TaskParser, create_cli_parser

from .task import TaskGroup

class WraprunError(Exception):
    '''Class for managing wraprun-specific errors.'''
    pass

class Wraprun(object):
    def __init__(self, argv=None, **kwargs):

        # Take arguments from cli/argv xor kwargs.
        if kwargs and argv:
            raise WraprunError("Use either CLI or API, not both.")

        # Set null defaults.
        self._parser = TaskParser()
        self._options = {}
        self._task_groups = []
        self._env = None
        self._tmpfile = None
        self._ranks = 0
        self._colors = 0

        # TODO: Merge some of this funtionality into a cli-parser class.
        if argv is not None:
            cli_parser = create_cli_parser()
            try:
                first_group_marker = argv.index(':')
            except ValueError:
                first_group_marker = len(argv)
            known_args = cli_parser.parse_args(argv[1:first_group_marker])
            self._options.update(GLOBAL_OPTIONS.all_args(known_args))
            self.add_task(**(GROUP_OPTIONS.all_args(known_args)))
            for string in ' '.join(argv[first_group_marker + 1:]).split(':'):
                self.add_task(string=string)

        if kwargs:
            # Pick out config first.
            self._conf = kwargs.pop('conf', None)

            # Load parameters from conf, if given.
            if self._conf is not None:
                self._load_conf()

            # Explicitly passed args override/augment conf.
            for k, arg in kwargs.iteritems():
                if k in GLOBAL_OPTIONS.wraprun.names():
                    self._options[k] = arg


    def __repr__(self):
        return "Wraprun(ranks={ranks}, colors={colors})".format(
            ranks=self._ranks, colors=self._colors)

    def _load_conf(self):
        # read configuration file
        # populate options
        # populate tasks
        raise NotImplementedError

    def add_task(self, string=None, **kwargs):
        kwargs.update(first_rank=self._ranks, first_color=self._colors)
        if string is not None:
            kwargs.update(self._parser.parse_task(string))
        task_group = TaskGroup(**kwargs)
        self._ranks, self._colors = [
            i + 1 for i in task_group.last_rank_and_color()]
        self._task_groups.append(task_group)
        self._update_file(task_group)

    def _debug_mode(self):
        return not self._options.get('debug')

    @property
    def _file(self):
        '''Return the File object for storing the wrapper rank parameters.'''
        if self._tmpfile is None or self._tmpfile.close_called:
            dir_path = self._options.get('scratch_dir', None)
            if dir_path is not None:
                try:
                    os.makedirs(dir_path, '0700')
                except OSError as err:
                    if err.errno is not 17:
                        raise
            self._tmpfile = tempfile.NamedTemporaryFile(
                'a+', prefix='wraprun_', suffix='.tmp', dir=dir_path,
                delete=self._debug_mode())
        return self._tmpfile

    def _update_file(self, task_group):
        tmpfile = self._file.file
        for rank in task_group.ranks:
            tmpfile.write(rank.string() + "\n")
        tmpfile.flush()

    @property
    def env(self):
        '''Return a dictionary of environment variables set by wraprun
        at runtime.'''
        try:
            if self._env is None:
                self._env = dict()
                self._env['LD_PRELOAD'] = os.environ['WRAPRUN_PRELOAD']
                self._env['WRAPRUN_FILE'] = self._file.name
                self._env['W_REDIRECT_OUTERR'] = '1'
                self._env['W_IGNORE_SEGV'] = '1'
                self._env['W_UNSET_PRELOAD'] = '1'
            return self._env
        except KeyError as error:
            self._env = None
            raise (WraprunError,
                   'Missing {v} environment variable'.format(v=error),
                   sys.exc_info()[2])


    def _aprun_arglist(self):
        arglist = []
        # TODO: 2016.01.25 M Belhorn - This default setting probably shouldn't
        # be set here.
        if 'nocopy' not in self._options:
            self._options['nocopy'] = True
        for k, value in self._options.iteritems():
            if value is None:
                continue
            option = GLOBAL_OPTIONS.aprun.get(k, None)
            if option is None:
                continue
            arglist.extend(option.format(value))
        return arglist

    def _task_arglist(self):
        args = []
        for i, task_group in enumerate(self._task_groups):
            if i > 0:
                args.append(':')
            args.extend(task_group.cli_args())
        return args

    def _subprocess_args(self):
        return ['aprun'] + self._aprun_arglist() + self._task_arglist()

    def launch(self):
        os.environ.update(self.env)
        # Last chance to update the log.
        sys.stdout.flush()
        if not self._debug_mode():
            #log('INFO', 'Launching aprun in wrapped environment')
            aprun = subprocess.Popen(
                self._subprocess_args(),
                env=os.environ)
            aprun.wait()
        else:
            # Print debugging information
            pass
