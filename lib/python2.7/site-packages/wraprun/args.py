import argparse
import sys
import os
from collections import OrderedDict

class ArgAction(argparse.Action):
    '''Base class for custom group argument argparse Actions.'''
    def __init__(self, *args, **kwargs):
        '''Create arparse.Action.'''
        super(ArgAction, self).__init__(*args, **kwargs)
        self.split = False
        self.cli = None

    def __call__(self, parser, namespace, values, option_string=None):
        '''Used by Argparse to process arguments.'''
        setattr(namespace, self.dest, values)
        self.cli = [option_string, values]

class FlagAction(ArgAction):
    '''Argparse action to processes MPMD group 'flag'-type arguments.'''
    def __init__(self, *args, **kwargs):
        '''Create arparse.Action for processing flag-type argument.'''
        default = kwargs.pop('default', None)
        const = kwargs.pop('const', True)
        nargs = kwargs.pop('nargs', 0)
        # TODO: add debugging warning if nargs != 0
        super(FlagAction, self).__init__(
            *args, default=default, nargs=0, const=const, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        '''Used by Argparse to process arguments.'''
        if self.const is not self.default:
            setattr(namespace, self.dest, self.const)
            self.cli = [option_string] if option_string is not None else None


class PesAction(ArgAction):
    '''Argparse action to process MPMD group "Processing Elements" (PES).

    Looks for rank colorsplitting as comma-separated integer lists of the form
        '-n x[,y]...'
    where 'x' and 'y' are integers.
    '''
    def __init__(self, *args, **kwargs):
        '''Create arparse.Action for processing PES argument.'''
        super(PesAction, self).__init__(*args, **kwargs)
        self.split = True

    def __call__(self, parser, namespace, values, option_string=None):
        '''Used by Argparse to process arguments.'''
        ranks_per_color = [int(i) for i in values.split(',')]
        setattr(namespace, self.dest, ranks_per_color)
        self.cli = [option_string, str(sum(ranks_per_color))]


class PathAction(ArgAction):
    '''Argparse action to process MPMD group CWD '--w-cd' arguments.

    Looks for rank colorsplitting as comma-separated path lists of the form
      --w-cd path1[,path2]...'
    where the paths cannot contain ','.
    '''
    def __init__(self, *args, **kwargs):
        '''Create arparse.Action for processing group CWD argument.'''
        super(PathAction, self).__init__(*args, **kwargs)
        self.split = True
        self.is_aprun_arg = False

    def __call__(self, parser, namespace, values, option_string=None):
        '''Used by Argparse to process arguments.'''
        paths_by_color = [i for i in values.split(',')]
        setattr(namespace, self.dest, paths_by_color)

global_wraprun_options = OrderedDict()
global_wraprun_options['conf'] = {
    'parse_opts': {
        'dest': 'conf',
        'help': 'Wraprun configuration file',
    },
}
global_wraprun_options['debug'] = {
    # parse_args: ['--w-debug'],
    # Generated from keys
    'parse_opts': {
        'dest': 'debug',
        'action': 'store_true',
        'help': 'Print Wraprun debugging information and exit',
    },
}
global_wraprun_options['roe'] = {
    'parse_opts': {
        'dest': 'roe',
        'action': 'store_true',
        'help': 'DEPRECATED: Redirect group IO to separate files',
    },
}

global_aprun_options = OrderedDict()
global_aprun_options['nocopy'] = {
    'parse_args': ['-b'],
    'parse_opts': {
        'dest': 'nocopy',
        'action': 'store_true',
        'help': 'Do not copy executable to compute nodes',
    },
}

group_wraprun_options = OrderedDict()
group_wraprun_options['cd'] = {
    'split': True,
    'parse_opts': {
        'dest': 'path',
        'metavar': "dir[,dir...]",
        'default': ['./'],
        'action': PathAction,
        'help': 'Task working directory',
    },
}

group_aprun_options = OrderedDict()
group_aprun_options['pes'] = {
    'parse_args': ['-n'],
    'split': True,
    'parse_opts': {
        'dest': 'pes',
        'metavar':"pes[,pes...]",
        'required': True,
        'action': PesAction,
        'help': 'Number of processing elements (PEs). REQUIRED',
    },
}
group_aprun_options['arch'] = {
    'parse_args': ['-a'],
    'parse_opts': {
        'dest': 'arch',
        'metavar': 'arch',
        'action': ArgAction,
        'help': 'Host architecture',
    },
}
group_aprun_options['cpu_list'] = {
    'parse_args': ['-cc'],
    'parse_opts': {
        'dest': 'cpu_list',
        'metavar': 'list',
        'action': ArgAction,
        'help': 'CPU list',
    },
}
group_aprun_options['cpu_placement'] = {
    'parse_args': ['-cp'],
    'parse_opts': {
        'dest': 'cpu_placement_file',
        'metavar': 'file',
        'action': ArgAction,
        'help': 'CPU placement file',
    },
}
group_aprun_options['depth'] = {
    'parse_args': ['-d'],
    'parse_opts': {
        'dest': 'depth',
        'metavar': 'depth',
        'action': ArgAction,
        'help': 'Process affinity depth',
    },
}
group_aprun_options['cpus_per_cu'] = {
    'parse_args': ['-j'],
    'parse_opts': {
        'dest': 'cpus_per_cu',
        'metavar': 'cpupcu',
        'action': ArgAction,
        'help': 'CPUs per CU',
    },
}
group_aprun_options['node_list'] = {
    'parse_args': ['-L'],
    'parse_opts': {
        'dest': 'node_list',
        'metavar': 'nodes',
        'action': ArgAction,
        'help': 'Node list',
    },
}
group_aprun_options['pes_per_node'] = {
    'parse_args': ['-N'],
    'parse_opts': {
        'dest': 'pes_per_node',
        'metavar': 'ppn',
        'action': ArgAction,
        'help': 'PEs per node'
    },
}
group_aprun_options['pes_per_numa_node'] = {
    'parse_args': ['-S'],
    'parse_opts': {
        'dest': 'pes_per_numa_node',
        'metavar': 'ppnn',
        'action': ArgAction,
        'help': 'PEs per NUMA node'
    },
}
group_aprun_options['numa_node_list'] = {
    'parse_args': ['-sl'],
    'parse_opts': {
        'dest': 'numa_node_list',
        'metavar': 'list',
        'nargs': 1,
        'action': ArgAction,
        'help': 'NUMA node list'
    },
}
group_aprun_options['numa_nodes_per_node'] = {
    'parse_args': ['-sn'],
    'parse_opts': {
        'dest': 'numa_nodes_per_node',
        'metavar': 'nnpn',
        'nargs': 1,
        'action': ArgAction,
        'help': 'Number of NUMA nodes per node'
    },
}
group_aprun_options['strict_memory'] = {
    'parse_args': ['-ss'],
    'parse_opts': {
        'dest': 'strict_memory',
        'nargs': 0,
        'action': FlagAction,
        'help': 'Use strict memory containment'
    },
}
group_aprun_options['exe'] = {
    'parse_args': ['exe'],
    'parse_opts': {
        'metavar': 'exe [...]',
        'nargs': argparse.REMAINDER,
        'help': 'Executable and argument string. REQUIRED'
    },
}
